from typing import Any, Final, Literal, TypeAlias

import numpy as np
from h5py.h5ac import CacheConfig
from h5py.h5s import SpaceID
from typing_extensions import Self  # noqa: UP035

from ._objects import ObjectID, phil, with_phil

__all__ = [
    "CRT_ORDER_INDEXED",
    "CRT_ORDER_TRACKED",
    "DATASET_ACCESS",
    "DATASET_CREATE",
    "DATASET_XFER",
    "DEFAULT",
    "FILE_ACCESS",
    "FILE_CREATE",
    "GROUP_CREATE",
    "LINK_ACCESS",
    "LINK_CREATE",
    "NO_CLASS",
    "OBJECT_COPY",
    "OBJECT_CREATE",
    "PropClassID",
    "PropCopyID",
    "PropCreateID",
    "PropDAID",
    "PropDCID",
    "PropDXID",
    "PropFAID",
    "PropFCID",
    "PropGCID",
    "PropID",
    "PropInstanceID",
    "PropLAID",
    "PropLCID",
    "PropOCID",
    "PropTCID",
    "create",
    "phil",
    "with_phil",
]

CRT_ORDER_INDEXED: Final[int]
CRT_ORDER_TRACKED: Final[int]
DATASET_ACCESS: Final[PropClassID]
DATASET_CREATE: Final[PropClassID]
DATASET_XFER: Final[PropClassID]
DEFAULT: Literal[None]
FILE_ACCESS: Final[PropClassID]
FILE_CREATE: Final[PropClassID]
GROUP_CREATE: Final[PropClassID]
LINK_ACCESS: Final[PropClassID]
LINK_CREATE: Final[PropClassID]
NO_CLASS: Final[PropClassID]
OBJECT_COPY: Final[PropClassID]
OBJECT_CREATE: Final[PropClassID]

_AnyShape: TypeAlias = tuple[int, ...]
_AnyArray: TypeAlias = np.ndarray[_AnyShape, np.dtype[Any]]

type _PropListID = (
    PropFCID | PropFAID | PropDCID | PropDXID | PropCopyID | PropLCID | PropLAID | PropGCID | PropDAID | PropOCID | PropTCID
)

def create(cls: PropClassID) -> _PropListID: ...

class H5FD_ros3_fapl_t:
    version: int
    authenticate: bool
    aws_region: bytes
    secret_id: bytes
    secret_key: bytes

class PropID(ObjectID):
    def equal(self, plist: PropID) -> bool: ...

class PropClassID(PropID): ...

class PropInstanceID(PropID):
    def copy(self) -> Self: ...

class PropCreateID(PropInstanceID): ...

class PropCopyID(PropInstanceID):
    def set_copy_object(self, flags: int) -> None: ...
    def get_copy_object(self) -> int: ...

# --- Object creation ---

class PropOCID(PropCreateID):
    def set_attr_creation_order(self, flags: int) -> None: ...
    def get_attr_creation_order(self) -> int: ...
    def set_attr_phase_change(self, max_compact: int = 8, min_dense: int = 6) -> None: ...
    def get_attr_phase_change(self) -> tuple[int, int]: ...
    def set_obj_track_times(self, track_times: bool) -> None: ...
    def get_obj_track_times(self) -> bool: ...

class PropDCID(PropOCID):
    def set_layout(self, layout_code: int) -> None: ...
    def get_layout(self) -> int: ...
    def set_chunk(self, chunksize: tuple[int, ...]) -> None: ...
    def get_chunk(self) -> tuple[int, ...]: ...
    def set_fill_value(self, value: _AnyArray) -> None: ...
    def get_fill_value(self, value: _AnyArray) -> None: ...
    def fill_value_defined(self) -> int: ...
    def set_fill_time(self, fill_time: int) -> None: ...
    def get_fill_time(self) -> int: ...
    def set_alloc_time(self, alloc_time: int) -> None: ...
    def get_alloc_time(self) -> int: ...
    def set_filter(self, filter_code: int, flags: int = 0, values: tuple[int, ...] | None = None) -> None: ...
    def all_filters_avail(self) -> bool: ...
    def get_nfilters(self) -> int: ...
    def get_filter(self, filter_idx: int) -> tuple[int, int, tuple[int, ...], bytes]: ...
    def get_filter_by_id(self, filter_code: int) -> tuple[int, tuple[int, ...], bytes]: ...
    def remove_filter(self, filter_class: int) -> None: ...
    def set_deflate(self, level: int = 5) -> None: ...
    def set_fletcher32(self) -> None: ...
    def set_shuffle(self) -> None: ...
    def set_szip(self, options: int, pixels_per_block: int) -> None: ...
    def set_scaleoffset(self, scale_type: int, scale_factor: int) -> None: ...
    def set_external(self, name: bytes, offset: int, size: int) -> None: ...
    def get_external_count(self) -> int: ...
    def get_external(self, idx: int = 0) -> tuple[bytes, int, int]: ...
    def set_virtual(self, vspace: SpaceID, src_file_name: bytes, src_dest_name: bytes, src_space: SpaceID) -> None: ...
    def get_virtual_count(self) -> int: ...
    def get_virtual_dsetname(self, index: int = 0) -> bytes: ...
    def get_virtual_filename(self, index: int = 0) -> bytes: ...
    def get_virtual_vspace(self, index: int = 0) -> SpaceID: ...
    def get_virtual_srcspace(self, index: int = 0) -> SpaceID: ...

class PropFCID(PropOCID):
    def get_version(self) -> tuple[int, int, int, int]: ...
    def set_userblock(self, size: int) -> None: ...
    def get_userblock(self) -> int: ...
    def set_sizes(self, addr: int, size: int) -> None: ...
    def get_sizes(self) -> tuple[int, int]: ...
    def set_link_creation_order(self, flags: int) -> None: ...
    def get_link_creation_order(self) -> int: ...
    def set_file_space_strategy(self, strategy: int, persist: bool, threshold: int) -> None: ...
    def get_file_space_strategy(self) -> tuple[int, bool, int]: ...
    def set_file_space_page_size(self, fsp_size: int) -> None: ...
    def get_file_space_page_size(self) -> int: ...

# --- Object access ---

class PropFAID(PropInstanceID):
    def set_fclose_degree(self, close_degree: int) -> None: ...
    def get_fclose_degree(self) -> int: ...
    def set_fapl_core(self, block_size: int = 65536, backing_store: bool = True) -> None: ...
    def get_fapl_core(self) -> tuple[int, bool]: ...
    def set_fapl_family(self, memb_size: int = 2147483647, memb_fapl: PropFAID | None = None) -> None: ...
    def get_fapl_family(self) -> tuple[int, PropFAID]: ...
    def set_fapl_ros3(self, aws_region: bytes = b"", secret_id: bytes = b"", secret_key: bytes = b"") -> None: ...
    def get_fapl_ros3(self) -> H5FD_ros3_fapl_t: ...
    def get_fapl_ros3_token(self) -> bytes: ...
    def set_fapl_ros3_token(self, token: bytes = b"") -> None: ...
    def set_fapl_log(self, logfile: bytes, flags: int, buf_size: int) -> None: ...
    def set_fapl_sec2(self) -> None: ...
    def set_fapl_direct(self, alignment: int = 0, block_size: int = 0, cbuf_size: int = 0) -> None: ...
    def get_fapl_direct(self) -> tuple[int, int, int]: ...
    def set_fapl_stdio(self) -> None: ...
    def set_fapl_split(
        self,
        meta_ext: bytes = b"-m.h5",
        meta_plist_id: PropID | None = None,
        raw_ext: bytes = b"-r.h5",
        raw_plist_id: PropID | None = None,
    ) -> None: ...
    def set_driver(self, driver_id: int) -> int: ...
    def set_fileobj_driver(self, driver_id: int, fileobj: object) -> int: ...
    def get_driver(self) -> int: ...
    def set_cache(self, mdc: int, rdcc: int, rdcc_nbytes: int, rdcc_w0: float) -> None: ...
    def get_cache(self) -> tuple[int, int, int, float]: ...
    def set_sieve_buf_size(self, size: int) -> None: ...
    def get_sieve_buf_size(self) -> int: ...
    def set_libver_bounds(self, low: int, high: int) -> None: ...
    def set_meta_block_size(self, size: int) -> None: ...
    def get_meta_block_size(self) -> int: ...
    def get_libver_bounds(self) -> tuple[int, int]: ...
    def get_mdc_config(self) -> CacheConfig: ...
    def set_mdc_config(self, config: CacheConfig) -> None: ...
    def get_alignment(self) -> tuple[int, int]: ...
    def set_alignment(self, threshold: int, alignment: int) -> None: ...
    def set_file_image(self, image: memoryview | None) -> None: ...
    def set_page_buffer_size(self, buf_size: int, min_meta_per: int = 0, min_raw_per: int = 0) -> None: ...
    def get_page_buffer_size(self) -> tuple[int, int, int]: ...
    def get_file_locking(self) -> tuple[bool, bool]: ...
    def set_file_locking(self, use_file_locking: bool, ignore_when_disabled: bool) -> None: ...

class PropDXID(PropInstanceID):
    def set_dxpl_mpio(self, xfer_mode: int) -> None: ...
    def get_dxpl_mpio(self) -> int: ...

class PropDAID(PropInstanceID):
    def set_chunk_cache(self, rdcc_nslots: int, rdcc_nbytes: int, rdcc_w0: float) -> None: ...
    def get_chunk_cache(self) -> tuple[int, int, float]: ...
    def get_efile_prefix(self) -> bytes: ...
    def set_efile_prefix(self, prefix: bytes) -> None: ...
    def set_virtual_view(self, view: int) -> None: ...
    def get_virtual_view(self) -> int: ...
    def set_virtual_printf_gap(self, gap_size: int = 0) -> None: ...
    def get_virtual_printf_gap(self) -> int: ...
    def get_virtual_prefix(self) -> bytes: ...
    def set_virtual_prefix(self, prefix: bytes) -> None: ...

class PropLCID(PropCreateID):
    def set_char_encoding(self, encoding: int) -> None: ...
    def get_char_encoding(self) -> int: ...
    def set_create_intermediate_group(self, create: bool) -> None: ...
    def get_create_intermediate_group(self) -> bool: ...

class PropLAID(PropInstanceID):
    def set_nlinks(self, nlinks: int) -> None: ...
    def get_nlinks(self) -> None: ...
    def set_elink_prefix(self, prefix: bytes) -> None: ...
    def get_elink_prefix(self) -> bytes: ...
    def set_elink_fapl(self, fapl: PropFAID) -> None: ...
    def get_elink_fapl(self) -> PropFAID: ...
    def set_elink_acc_flags(self, flags: int) -> None: ...
    def get_elink_acc_flags(self) -> int: ...

class PropGCID(PropOCID):
    def set_link_creation_order(self, flags: int) -> None: ...
    def get_link_creation_order(self) -> int: ...

# --- Data type creation ---
class PropTCID(PropOCID): ...
